# STUFF 
# CX Documentation: https://coralogix.com/docs/developer-portal/apis/version-tags/curl-version-tags/#support

name: Coralogix Inject Version Tags
on :
  workflow_call:
    inputs:
      name:
        description: 'Name' 
        required: true
        type: string
      application:
        description: 'Application'
        required: true
        type: string
      subsystem:
        description: 'Subsystem'
        required: true
        type: string
      cx_version_benchmark_url: 
        description: 'URL for Coralogix Benchmark Version'
        required: true 
        type: string
    secrets:
      cx_version_benchmark_api_key: 
        description: 'Coralogix Benchmark API Key'
        required: true
    
jobs:
  setup_vars:
    runs-on: ubuntu-latest
    steps:    
    - name: Check Environment Variables
      run: |
        if [[ -z "${{ env.cx_version_benchmark_url }}" ]] || [[ -z "${{ secrets.cx_version_benchmark_api_key }}" ]]; then
            echo "Error: Environment variables cx_version_benchmark_url or cx_version_benchmark_api_key are not set."
            exit 55
        fi

    - name: Sanitize Inputs
      id: sanitize
      run: |
        sanitize_input() {
            echo "$1" | tr -d '[:space:]' | tr -cd '[:alnum:]-_'
        }

        sanitized_name=$(sanitize_input "${{ inputs.name }}")
        sanitized_application=$(sanitize_input "${{ inputs.application }}")
        sanitized_subsystem=$(sanitize_input "${{ inputs.subsystem }}")

        # Output the values, prepend v to name 
        echo "SANITIZED_NAME="v$sanitized_name" >> $GITHUB_ENV
        echo "SANITIZED_APPLICATION=$sanitized_application" >> $GITHUB_ENV
        echo "SANITIZED_SUBSYSTEM=$sanitized_subsystem" >> $GITHUB_ENV

  curl_request:    
    runs-on: ubuntu-latest     
    needs: setup_vars
    steps:
      - name: Send POST Request
        id: post-request
        run: |
          response=$(curl -s -o response.txt -w "%{http_code}" \
          --location \
          --request POST "${{ env.cx_version_benchmark_url }}" \
          --header "Authorization: Bearer ${{ secrets.cx_version_benchmark_api_key }}" \
          --header "Content-Type: application/json" \
          --data-raw '{
            "name": "${{ env.SANITIZED_NAME }}",
            "application": ["${{ env.SANITIZED_APPLICATION }}"],
            "subsystem": ["${{ env.SANITIZED_SUBSYSTEM }}"],
            "key": ["${{ secrets.cx_version_benchmark_api_key}}"]
          }')

          if [[ "$response" -ne 200 ]]; then
            echo "Error: Received HTTP status code $response"
            cat response.txt
            exit 30
          fi

          echo "Request successful. Response:"
          cat response.txt
