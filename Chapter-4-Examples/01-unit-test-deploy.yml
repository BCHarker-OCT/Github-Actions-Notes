name: Solar System Workflow 
on : 
  workflow_dispatch: 
  push: 
    branches: 
      - main 
      - 'feature/*' 
      
env: 
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO PASSWORD: ${{ secrets.MONGO_PASSWORD }} 
  
 ## JOB LEVEL ENV VARS TAKE PRECEDENCE OVER WORKFLOW LEVEL ENV VARS 
jobs: 
  unit-testing:
      name: Unit Testing
      services:  
        mongo-db: 
          image: bcharker-oct/mongo-db:non-prod
          ports:
            - 27017:27017
      env:
        MONGO_URI: 'mongodb://localhost:27017superData'
        MONGO_USERNAME: non-prod-user
        MONGO PASSWORD: non-prod-password]
      strategy:
         matrix:
           nodejs_version: [18, 19, 20]
           operating_system: [ubuntu-latest, macos-latest]
           exclude:
             - nodejs_version: 18
               operating_system: macos-latest

      runs-on: ${{ matrix.operating_system }}
      steps: 
      - name: Checkout Repository 
        uses: actions/checkout@v4 

      - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3 
        with: 
          node-version: ${{ matrix.nodejs_version }}

      # An example of caches dependencies 
      - name: Cache NPM Dependencies
        uses: actions/cache@v3
        with:
          # Folder where dependencies are located 
          path: ~/.npm
          # Hash for file so if cache changes dependency loaded will also change 
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }} 

        
      # If cache is setup as above it will automatically be used. 
      - name: Install Dependencies 
        run: npm install 
        
      - name: Unit Testing 
        id: nodejs-unit-testing-step
        run: npm test

      - name: Archive Test Result 
        if: always() # we could run this always in case of npm test failure 
        # if: success() #applied by DEFAULT!
        # if: failure() # 
        # if: failure() && steps.nodejs-unit-testing-step.outcome == 'failure' ||  steps.nodejs-units.testing.step.outcome == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: Mocha-Test-Result
          path: test-results.xml

  code-coverage: 
      name: Code Coverage
      container:
        image: node:18
      services:  
        mongo-db: 
          image: bcharker-oct/mongo-db:non-prod
          options: 
            --name mongo
      env:
        MONGO_URI: 'mongodb://mongo:27017superData'
        MONGO_USERNAME: non-prod-user
        MONGO PASSWORD: non-prod-password]  
      runs-on: ubuntu-latest 
      steps: 
      - name: Checkout Repository 
        uses: actions/checkout@v4

      # - name: Setup NodeJS Version - 18 
      #   uses: actions/setup-node@v3 
      #   with: 
      #     node-version: 18 

      - name: Install Dependencies 
        run: npm install 

      - name: Check Code Coverage
        continue-on-error: true 
        run: npm run coverage 

      - name: Archive Test Result 
        uses: actions/upload-artifact@v3 
        with: 
          name: Code-Coverage-Result 
          path: coverage 
          retention-days: 5

  docker:
      name: Containerization
      needs: [unit-testing, code-coverage]
      # Below permissions are to allow write to GHCR
      permissions: 
        packages: write
      runs-on: ubuntu-latest
      steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: GHCR Login
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}      

      # Builds the image locally on the runner for testing 
      - name: Docker Build for Testing
        uses: docker/build-push-action@v4
        with:
          context: . 
          push: false
          tag: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGO_URI \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ env.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
          echo $IP

          echo Testing Image URL using wget
          wget -q -O - 127.0.0.1:3000/live | grep live 

      # Build and pushes the image to docker hub && GHCR 
      - name: Docker Build for Testing
        uses: docker/build-push-action@v4
        with:
          context: . 
          push: true
          tag: | 
            ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            ghcro.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}    

  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: docker
    runs-on: ubuntu-latest
    environment:
      name: development 
      url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    outputs: 
      APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
    steps:
      - name: Checkout Repo 
        uses: actions/checkout@v4

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v3 
        with:
          version: 'v1.26.0'

      - name: Set Kubeconfig 
        uses: azure/k8s-set-context@v3 
        with: 
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}    

      - name: Fetch Kubernetes Cluster Details
        run: | 
          kubectl version --short 
          echo ----------------------------
          kubectl get nodes 
     
      - name: Save Nginx Ingress Controller IP as a GH Env VAR 
        run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV


      - name: Replace Token in Manifest Files 
        uses: cshleiden/replace-tokens@v1.3
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP}} 

      - name: Create MongoDB Secret 
        run: | 
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
          --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
          --from-literal=MONGO_USERNAME:${{ env.MONGO_USERNAME }} \
          --from-literal=MONGO_PASSWORD:${{ secrets.MONGO_PASSWORD }} \
          --save-config \
          --dry-run=client \
          -o yaml | kubectl apply -f -

      - name: Check Files
        run: | 
          cat kubernetes/development/*.yaml

      - name: Deploy to Dev Env 
        run: | 
          kubectl apply -f kubernetes/development

      - name: Set App Ingress Host URL 
        id: set-ingress-host-address
        run: |
          echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_ENV

  dev-integration-testing: 
    if: contains(github.ref, 'feature/')
    name: Dev integration Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps: 
      - name: Test URL Output using CRL and JQ 
        env: 
          URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL}}
        run: | 
          echo $URL 
          echo "--------------------------------"
          curl https://$URL/live -s -k | jq -r .status | grep -i live

  prod-deploy:
    if: github.ref == 'ref/heads/main'
    needs: dev-integration-testing
    runs-on: ubuntu-latest
    environment:
      name: production 
      url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST }}
    outputs: 
      APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
    steps:
      - name: Checkout Repo 
        uses: actions/checkout@v4

      - name: Install kubectl CLI
        uses: azure/setup-kubectl@v3 
        with:
          version: 'v1.26.0'

      - name: Set Kubeconfig 
        uses: azure/k8s-set-context@v3 
        with: 
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}    

      - name: Fetch Kubernetes Cluster Details
        run: | 
          kubectl version --short 
          echo ----------------------------
          kubectl get nodes 
     
      - name: Save Nginx Ingress Controller IP as a GH Env VAR 
        run: |
          echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{.status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV


      - name: Replace Token in Manifest Files 
        uses: cshleiden/replace-tokens@v1.3
        with:
          tokenPrefix: '_{_'
          tokenSuffix: '_}_'
          files: '["kubernetes/development/*.yaml"]'
        env:
          NAMESPACE: ${{ vars.NAMESPACE }}
          REPLICAS: ${{ vars.REPLICAS }}
          IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
          INGRESS_IP: ${{ env.INGRESS_IP}} 

      - name: Create MongoDB Secret 
        run: | 
          kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
          --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
          --from-literal=MONGO_USERNAME:${{ env.MONGO_USERNAME }} \
          --from-literal=MONGO_PASSWORD:${{ secrets.MONGO_PASSWORD }} \
          --save-config \
          --dry-run=client \
          -o yaml | kubectl apply -f -

      - name: Check Files
        run: | 
          cat kubernetes/production/*.yaml

      - name: Deploy to PROD Env 
        run: | 
          kubectl apply -f kubernetes/production

      - name: Set App Ingress Host URL 
        id: set-ingress-host-address
        run: |
          echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_ENV

  prod-integration-testing:
    if: github.ref == 'ref/heads/main'           
    name: Prod integration Testing
    needs: prod-deploy
    runs-on: ubuntu-latest
    steps: 
      - name: Test URL Output using CRL and JQ 
        env: 
          URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_URL}}
        run: | 
          echo $URL 
          echo "--------------------------------"
          curl https://$URL/live -s -k | jq -r .status | grep -i live  